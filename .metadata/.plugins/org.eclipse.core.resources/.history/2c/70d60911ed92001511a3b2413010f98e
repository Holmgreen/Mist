package Inventory;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import java.util.ArrayList;

import Entity.Ooru;

public class Inventory extends Rectangle {
    private static final long serialVersionUID = 1L;
    private int rows = 3;
    private int cols = 3;
    private int numBlocks = rows * cols;
    private final int blockSize = 20;
    private final int blockSpace = 1;
    private ItemStack[] itemStacks;

    //If this is true a window will appear with options for the user. (USE, MOVE, DELETE)
    private boolean selected = false;

    private boolean full = false;
    
    private int currentChoice = 0;
    private int menuChoice = 0;
    private Ooru ooru;

    private int numItemStacks;

    private BufferedImage image; //This will be the inventory image, instead of a rectangle

    public Inventory() {
	setBounds(0, 0, cols * (blockSize + blockSpace) + blockSpace, rows * (blockSize + blockSpace) + blockSpace);
	itemStacks = new ItemStack[numBlocks];
	numItemStacks = 0;
    }

    public boolean add(Item item) {
	if(item.getType() == 1) {
	}
	int index = containsNotFullStackOf(item);
	if (index != -1) {
	    itemStacks[index].add(1);
	    return true;
	} else {
	    index = 0;
	    while (itemStacks[index] != null) {
		index++;
		if (index >= itemStacks.length) {
		    //TEST
		    full = true;

		    return false;
		}
	    }
	    itemStacks[index] = new ItemStack(item);
	    itemStacks[index].add(1);
	    numItemStacks++;
	    return true;
	}
    }
    
    //returns the quantity of item in this inventory.
    public int quantity(Item item){
    	for(int i = 0; i < rows; i++){
    			if (itemStacks[i].containsItem(item)){
    				
    			}
    	}
    }

    //returns the index of which itemStacks contains item at. The found itemStack must not be full for this method to return other than -1. 
    public int containsNotFullStackOf(Item item) {
	for (int i = 0; i < itemStacks.length; i++) {
	    if(itemStacks[i] != null) {
	    if (itemStacks[i].containsItem(item) && !itemStacks[i].isFull()) return i;
	    }
	}
	return -1;
    }
    
    //returns the index of the first item found in this inventory that is equal to item.
    public int contains(Item item) {
	for (int i = 0; i < itemStacks.length; i++) {
	    if (itemStacks[i].containsItem(item)) return i;
	}
	return -1;
    }

    public boolean add(ItemStack itemStack, int index) {
	ItemStack temp = itemStacks[index];
	if (temp == null) {
	    itemStacks[index] = itemStack;
	    numItemStacks++;
	    return true;
	} else if (temp.containsItem(itemStack.getItem())) {
	    if (temp.isFull()) {
		return false;
	    } else {
		itemStacks[index].addStack(itemStack);
		return true;
	    }
	}
	return false;
    }

    public void remove(int i) {
	itemStacks[i] = null;
	numItemStacks--;
	if(full) {
	    full = false;
	}
    }

    public void move(int fromIndex, int toIndex) {
	ItemStack itemStack = itemStacks[fromIndex];
	add(itemStack, toIndex);
    }

    public void setPosition(int x, int y) {
	this.x = x;
	this.y = y;
    }

    //Getters 
    public Item getItemAt(int i) {
	return itemStacks[i].getItem();
    }

    //    public boolean containsItem(int index) {
    //	if (itemStacks.get(index) != null) {
    //	    return true;
    //	} else {
    //	    return false;
    //	}
    //
    //    }

    public void setCurrentChoice(int i) {
	currentChoice = i;
	if (currentChoice >= numBlocks) {
	    currentChoice = 0;
	} else if (currentChoice < 0) {
	    currentChoice = numBlocks - 1;
	}
    }

    public void moveChoice(int i) {
	currentChoice += i;
	if (currentChoice >= numBlocks) {
	    currentChoice = currentChoice % numBlocks;
	} else if (currentChoice < 0) {
	    currentChoice = numBlocks - 1;
	}
    }

    public void select(Ooru ooru) {
	this.ooru = ooru;
	selected = true;
    }

    public void menuSelect() {

    }

    public void update() {
	
	//Check if a stack should be removed.
	ItemStack is;
	for(int i = 0; i < itemStacks.length;i++) {
	    is = itemStacks[i];
	    if(is != null) {
		if(is.getSize() == 0) {
		    remove(i);
		}
	    }
	}
    }

    public int getRows() {
	return rows;
    }

    public int getCols() {
	return cols;
    }

    public void draw(Graphics2D g) {

	//Draw inventory

	//TEST
	g.setColor(new Color(80, 80, 80));
	g.fill(this);

	//g.drawImage(image, x, y, width, height);

	//Draw itemStacks in inventory
	g.setColor(Color.red);
	//TEST; CHANGE TO ROWS AND COLS (OR TO A REGULAR VECTOR)
	for (int i = 0; i < numBlocks; i++) {
	    if (itemStacks[i] != null) {
		Item item = itemStacks[i].getItem();
		g.drawImage(item.getImage(), x + blockSpace + (i % cols) * (blockSpace + blockSize), y + blockSpace + (i / cols) * (blockSize + blockSpace), blockSize, blockSize, null);
		if (i == currentChoice && selected) {
		    selected = false;
		    if(item.use(ooru)) {
			itemStacks[i].remove(1);
		    }
		}
		g.setColor(Color.black);
		g.setFont(new Font("Courier", Font.PLAIN, 12));
		g.drawString("" + itemStacks[i].getSize(), x + 1 + (i % cols) * (blockSpace + blockSize), y + 10 + (i / cols) * (blockSize + blockSpace));
	    }
	    //Currently selected item.
	    if (i == currentChoice) {
		g.setColor(Color.green);
		g.drawRect(x + (i % cols) * (blockSpace + blockSize), y + (i / cols) * (blockSize + blockSpace), blockSize + blockSpace, blockSize + blockSpace);
	    }

	}

    }

    public void deleteCurrentStack() {
	itemStacks[currentChoice] = null;
    }

}
