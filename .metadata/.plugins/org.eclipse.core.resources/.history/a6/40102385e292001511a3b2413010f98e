package Entity;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import java.util.ArrayList;

import javax.imageio.ImageIO;

import Audio.JukeBox;
import Enemies.Shelldon;
import GameState.GameStateManager;
import Inventory.Inventory;
import Main.GamePanel;
import Tiles.Tile;
import Tiles.TileMap;

public class Ooru extends Mob {
	private int orbs;
	private int maxOrbs;

	private ArrayList<Shelldon> enemies;

	private int teleRange;

	private Inventory inventory;

	private boolean casting;

	private Spell castingSpell;
	private boolean attackingAnimation;

	private CastBar cBar;
	private int cBarOffset;

	private ArrayList<Animation> gearAnimations;

	private UserInterface ui;

	private int gold;

	private Rectangle aoeBox;

	// If this is not equal to stateOfGame, it needs to update.
	private int stateOfOoru = 0;

	public static final int WALKING_DOWN = 0;
	public static final int WALKING_SIDE = 1;
	public static final int WALKING_UP = 2;
	public static final int CASTING_DOWN = 3;
	public static final int CASTING_SIDE = 4;
	public static final int CASTING_UP = 5;
	public static final int IDLE_DOWN = 6;
	public static final int IDLE_SIDE = 7;
	public static final int IDLE_UP = 8;
	public static final int ATTACKING_DOWN = 9;
	public static final int ATTACKING_SIDE = 10;
	public static final int ATTACKING_UP = 11;

	private final int[] NUMFRAMES = { 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
	private final int[] FRAMEWIDTHS = { 26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
			26, 26 };
	private final int[] FRAMEHEIGHTS = { 26, 26, 26, 26, 26, 26, 26, 26, 26,
			26, 26, 26 };
	private final int[] DELAYS = { 30, 30, 30, -1, -1, -1, -1, -1, -1, 30, 30,
			30 };
	private ArrayList<BufferedImage[]> sprites;
	private ArrayList<BufferedImage[]> shoulderSprites;

	private Animation shoulderAnimation;

	public Ooru(TileMap map, UserInterface ui) {
		super(map);
		this.ui = ui;
		init();
	}

	public void init() {
		// load sfx
		JukeBox.load("/SoundEffects/Ooru_hit.mp3", "ooruhit");
		JukeBox.load("/SoundEffects/blink.mp3", "blink");

		// load sprites
		try {

			BufferedImage spritesheet = ImageIO.read(getClass()
					.getResourceAsStream("/Mobs/Ooru.png"));

			int count = 0;
			sprites = new ArrayList<BufferedImage[]>();
			for (int i = 0; i < NUMFRAMES.length; i++) {
				BufferedImage[] bi = new BufferedImage[NUMFRAMES[i]];
				for (int j = 0; j < NUMFRAMES[i]; j++) {
					bi[j] = spritesheet.getSubimage(j * FRAMEWIDTHS[i], count,
							FRAMEWIDTHS[i], FRAMEHEIGHTS[i]);
				}
				sprites.add(bi);
				count += FRAMEHEIGHTS[i];
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		// inventory
		inventory = new Inventory();

		// Attributes
		health = 5;
		maxHealth = 5;
		orbs = 2;
		maxOrbs = 5;
		resistance = 2;

		// Acceleration
		moveSpeed = 1.6;
		maxSpeed = 1.6;
		stopSpeed = 1.6;

		// Damage
		whiteDamage = 1;
		whiteDmgRange = 52 * 2;
		dmgDelay = 1000;

		// Starting position
		x = tileMap.getWidth() - 32 * 2;
		y = tileMap.getHeight() - 32 * 2;

		// Sizes
		width = 26;
		height = 26;
		cwidth = 26;
		cheight = 26;

		// teleport
		teleRange = Blink.RANGE;
		cBarOffset = 30;
		cBar = new CastBar(GamePanel.WIDTH / 2 - 50 / 2, GamePanel.HEIGHT
				- cBarOffset, 50, 5);

		gold = 100;

		hitBox = new Rectangle(0, 0, 0, 0);
		aoeBox = new Rectangle(0, 0, 0, 0);

		animation = new Animation();
		setAnimation(IDLE_DOWN);
		gearAnimations = new ArrayList<Animation>();
	}

	public boolean isCasting() {
		return casting;
	}

	public void requestCasting(Spell sp) {
		if(!sp.activated()) return;
		if (!sp.onCooldown()) {
			if (!casting) {
				casting = true;
				castingSpell = sp;
				cBar.setCastTime(sp.getCastingTime());
				cBar.startCasting();
			}
		}
	}

	public void checkCasting() {
		if (casting) {
			if (cBar.successful()) {
				castingSpell.use(this);
				castingSpell = null;
				casting = false;
			}
		}
	}

	public boolean teleport() {
		int count = teleRange;
		currCol = (int) x / tileSize;
		currRow = (int) y / tileSize;
		if (facingUp) {
			for (int i = teleRange; i >= 0; i--) {
				if (tileMap.getType(currRow - i, currCol) != Tile.BLOCKED) {
					count = i;
					break;
				}
				count--;
			}
			if (count == 0) {
				return false;
			}
			ytemp = (currRow - count) * tileMap.getTileSize();

		} else if (facingDown) {
			for (int i = teleRange; i >= 0; i--) {
				if (tileMap.getType(currRow + i, currCol) != Tile.BLOCKED) {
					count = i;
					break;
				}
				count--;
			}
			if (count == 0) {
				return false;
			}
			ytemp = (currRow + count) * tileMap.getTileSize();

		} else if (facingRight) {
			for (int i = teleRange; i >= 0; i--) {
				if (tileMap.getType(currRow, currCol + i) != Tile.BLOCKED) {
					count = i;
					break;
				}
				count--;
			}
			if (count == 0) {
				return false;
			}
			xtemp = (currCol + count) * tileMap.getTileSize();

		} else {

			for (int i = teleRange; i >= 0; i--) {
				if (tileMap.getType(currRow, currCol - i) != Tile.BLOCKED) {
					count = i;
					break;
				}
				count--;
			}
			if (count == 0) {
				return false;
			}
			xtemp = (currCol - count) * tileMap.getTileSize();

		}
		setPosition(xtemp, ytemp);
		JukeBox.play("blink");
		return true;
	}

	public boolean moving() {
		return dx != 0 || dy != 0;
	}

	public void doWhiteDamage(Mob o) {
		if (System.currentTimeMillis() - attackTimer > dmgDelay) {
			if (o != null) {
				attackTimer = System.currentTimeMillis();
				o.loseHealth(whiteDamage);
			}
		}

	}

	public void doAoeDamage(double dmg) {
		if (enemies != null) {
			for (int i = 0; i < enemies.size(); i++) {
				Mob mob = enemies.get(i);
				if (aoeBox.intersects(enemies.get(i).getRectangle())) {
					mob.loseHealth(dmg);
				}
			}
		}
	}

	public void loseHealth(double damage) {
		health -= damage / resistance;
		JukeBox.play("ooruhit");
	}

	// Sets the animation frames, but also changes the current action.
	public void setAnimation(int i) {
		currentAction = i;
		animation.setFrames(sprites.get(currentAction));
		animation.setDelay(DELAYS[currentAction]);
		if (gearAnimations != null) {
			for (int j = 0; j < gearAnimations.size(); j++) {
				gearAnimations.get(j).setFrames(shoulderSprites.get(currentAction));
				gearAnimations.get(j).setDelay(DELAYS[currentAction]);
			}
		}
		width = FRAMEWIDTHS[currentAction];
		height = FRAMEHEIGHTS[currentAction];
	}

	public void setAttacking(boolean b) {
		attacking = b;
		attackingAnimation = b;
	}

	// Getters
	public int getMaxOrbs() {
		return maxOrbs;
	}

	public int getOrbs() {
		return orbs;
	}

	public Inventory getInventory() {
		return inventory;
	}

	public int getGold() {
		return gold;
	}

	public int getCurrentCol() {
		return currCol = (int) x / tileSize;
	}

	public int getCurrentRow() {
		return currRow = (int) y / tileSize;
	}

	public UserInterface getUI() {
		return ui;
	}

	public void setGold(int i) {
		gold = i;
	}

	public void incrementGold(int i) {
		gold += i;
	}

	public void incrementOrbs() {
		orbs++;
		if (orbs > maxOrbs) {
			orbs = 0;
			health++;
			maxHealth++;
		}
	}

	// Checkers
	public boolean checkTeleportAllowed() {
		// Returns if player is allowed to teleport to destination.
		// Use this in teleport to avoid blinking into blocked tiles.
		// Anv�nda n�gon while-loop kanske? Denna loopen �kar dx/dy tills den
		// n�r en v�gg eller tills dx/dy = teleRange.

		xdest = x + teleRange;
		ydest = y + teleRange;

		calculateCorners(x, ydest);
		if (facingUp) {
			if (topLeft || topRight) {
				return false;
			} else {
				return true;
			}
		}
		if (facingDown) {
			if (bottomLeft || bottomRight) {
				return false;
			} else {
				return true;
			}
		}

		calculateCorners(xdest, y);
		if (!facingRight) {
			if (topLeft || bottomLeft) {
				return false;
			} else {
				return true;
			}
		} else {

			if (topRight || bottomRight) {
				return false;
			} else {
				return true;
			}
		}
	}

	public void checkTileMapCollision() {
		currCol = (int) x / tileSize;
		currRow = (int) y / tileSize;

		xdest = x + dx;
		ydest = y + dy;

		xtemp = x;
		ytemp = y;

		calculateCorners(x, ydest);
		if (dy < 0) {
			if (topLeft || topRight) {
				dy = 0;
				collided = true;
				ytemp = currRow * tileSize + cheight / 2;
			} else {
				ytemp += dy;
				collided = false;
			}
		}
		if (dy > 0) {
			if (bottomLeft || bottomRight) {
				dy = 0;
				collided = true;
				ytemp = (currRow + 1) * tileSize - cheight / 2;
			} else {
				ytemp += dy;
				collided = false;
			}
		}

		calculateCorners(xdest, y);
		if (dx < 0) {
			if (topLeft || bottomLeft) {
				dx = 0;
				collided = true;
				xtemp = currCol * tileSize + cwidth / 2;
			} else {
				collided = false;
				xtemp += dx;
			}
		}
		if (dx > 0) {
			if (topRight || bottomRight) {
				dx = 0;
				collided = true;
				xtemp = (currCol + 1) * tileSize - cwidth / 2;
			} else {
				collided = false;
				xtemp += dx;
			}
		}

	}

	private void checkFacing() {
		if (right) {
			facingRight = true;
			facingUp = false;
			facingDown = false;
		} else if (left) {
			facingRight = false;
			facingDown = false;
			facingUp = false;
		} else if (up) {
			facingUp = true;
			facingDown = false;
			facingRight = false;
		} else if (down) {
			facingDown = true;
			facingUp = false;
			facingRight = false;
		}
	}

	private void checkAnimation() {
		if (casting) {
			if (facingUp) {
				if (currentAction != CASTING_UP)
					setAnimation(CASTING_UP);
			} else if (facingDown) {
				if (currentAction != CASTING_DOWN)
					setAnimation(CASTING_DOWN);
			} else {
				if (currentAction != CASTING_SIDE)
					setAnimation(CASTING_SIDE);
			}
		} else if (attacking || attackingAnimation) {
			if (animation.hasPlayedOnce()) {
				attacking = false;
				attackingAnimation = false;
			}
			if (facingUp) {
				if (currentAction != ATTACKING_UP)
					setAnimation(ATTACKING_UP);
			} else if (facingDown) {
				if (currentAction != ATTACKING_DOWN)
					setAnimation(ATTACKING_DOWN);
			} else {
				if (currentAction != ATTACKING_SIDE)
					setAnimation(ATTACKING_SIDE);
			}
		} else {
			if (right || left) {
				if (currentAction != WALKING_SIDE)
					setAnimation(WALKING_SIDE);
			} else if (up) {
				if (currentAction != WALKING_UP)
					setAnimation(WALKING_UP);
			} else if (down) {
				if (currentAction != WALKING_DOWN)
					setAnimation(WALKING_DOWN);
			} else {
				if (facingUp) {
					if (currentAction != IDLE_UP) {
						setAnimation(IDLE_UP);
					}
				} else if (facingDown) {
					if (currentAction != IDLE_DOWN) {
						setAnimation(IDLE_DOWN);
					}
				} else {
					if (currentAction != IDLE_SIDE) {
						setAnimation(IDLE_SIDE);
					}
				}
			}
		}
	}

	private void updateAoeBox() {
		if (casting) {
			int range = castingSpell.getRange();
			if (facingUp) {
				aoeBox.setBounds((int) (x + xmap - width / 2),
						(int) (y + ymap - castingSpell.getRange()), width,
						range);
			} else if (facingDown) {
				aoeBox.setBounds((int) (x + xmap - width / 2),
						(int) (y + ymap), width, range);
			} else if (facingRight) {
				aoeBox.setBounds((int) (x + xmap),
						(int) (y + ymap - height / 2), range, height);
			} else {
				aoeBox.setBounds((int) (x + xmap - range),
						(int) (y + ymap - height / 2), range, height);
			}
		}
	}

	public void update() {
		if (stateOfOoru != GameStateManager.stateOfGame) {
			updateState(stateOfOoru);
			stateOfOoru++;
		}
		checkCasting();
		cBar.update();
		ui.setAttributes(health, maxHealth, orbs, maxOrbs, gold);

		if (!casting) {
			getNextPosition();
			checkTileMapCollision();
			setPosition(xtemp, ytemp);
		}

		checkFacing();
		checkAnimation();
		updateHitBox();
		updateAoeBox();

		animation.update();

		// Update the gear animations that are specific for this mob.
		
		for (int i = 0; i < gearAnimations.size(); i++) {
			gearAnimations.get(i).update();
		}
		
	}

	private void updateState(int currentState) {
		// Things that can get updated are gear and spells.
		// Gear update requires to update animation, pictures and if they buff
		// anything.
		// Spells has to be taken away/inserted into a spellbutton.

		
		//Completed labyrinth!
		if (currentState == 0) {
			// load shoulderSprites
			try {

				BufferedImage spritesheet = ImageIO.read(getClass()
						.getResourceAsStream("/Objects/shoulders.png"));

				int count = 0;
				shoulderSprites = new ArrayList<BufferedImage[]>();
				for (int i = 0; i < NUMFRAMES.length; i++) {
					BufferedImage[] bi = new BufferedImage[NUMFRAMES[i]];
					for (int j = 0; j < NUMFRAMES[i]; j++) {
						bi[j] = spritesheet.getSubimage(j * FRAMEWIDTHS[i],
								count, FRAMEWIDTHS[i], FRAMEHEIGHTS[i]);
					}
					shoulderSprites.add(bi);
					count += FRAMEHEIGHTS[i];
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			shoulderAnimation = new Animation();
			gearAnimations.add(shoulderAnimation);
			setAnimation(currentAction);
			
			//activate spells.
			ui.activateSpell(UserInterface.SHADOW);
		}
		
		
	}

	public void draw(Graphics2D g) {
		super.draw(g);
		// TEST
		for (int i = 0; i < gearAnimations.size(); i++) {
			if (facingRight) {
				g.drawImage(gearAnimations.get(i).getImage(),
						(int) (x + xmap - width / 2),
						(int) (y + ymap - height / 2), null);
			} else {
				g.drawImage(gearAnimations.get(i).getImage(), (int) (x + xmap
						- width / 2 + width), (int) (y + ymap - height / 2),
						-width, height, null);
			}
		}

		//
		if (casting) {
			cBar.draw(g);
			if (castingSpell.isAoe()) {
				g.setColor(new Color(50, 0, 0, 20));
				g.fill(aoeBox);
			}
		}

	}

	public void updateEnemies(ArrayList<Shelldon> enemies) {
		this.enemies = enemies;
	}

	public void setMap(TileMap map) {
		this.tileMap = map;
	}

}
